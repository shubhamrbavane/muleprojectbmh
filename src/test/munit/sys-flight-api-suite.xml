<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="sys-flight-api-suite.xml" />
	<munit:test name="post:\flights:application\json:sys-flight-api-config-test" doc:id="6fdfb3da-ace9-455f-82a1-8f3570978ac9" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock bookFlight" doc:id="9056a9b8-a0b7-4baa-8fa1-99e767352be4" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f76d04d0-56e7-4e23-b12d-d3dd79e196d9" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postflightsapplicationjsonsysflightapiconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://postflightsapplicationjsonsysflightapiconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postflightsapplicationjsonsysflightapiconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="ae8303a9-39d2-41b6-8ebf-918b7c299099" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postflightsapplicationjsonsysflightapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postflightsapplicationjsonsysflightapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postflightsapplicationjsonsysflightapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\flights:application\json:sys-flight-api-config" doc:id="c88e1294-4504-4c11-ba55-cd0fd696615f" name="post:\flights:application\json:sys-flight-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="8a3181a5-5219-44e9-b1a3-2a151a338277" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postflightsapplicationjsonsysflightapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="sys-flight-api-main-test" doc:id="3c6fd0c7-d0dc-4be8-b3fd-897f8abc52d4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="8aa237e6-7b01-4516-a7ea-dc54d2cbcb46" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="c60b5398-e28b-48a0-a123-5ed9cb7d91a0" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://sysflightapimaintest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="querryParamsVar" value="#[output application/java --- readUrl('classpath://sysflightapimaintest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://sysflightapimaintest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://sysflightapimaintest\mock_variable_2.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="865cb799-240b-4028-90be-33affa5e5408" >
				<munit:payload value="#[readUrl('classpath://sysflightapimaintest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://sysflightapimaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to sys-flight-api-main" doc:id="432b9e75-0a90-4ffb-a100-37cbeffe3b8f" name="sys-flight-api-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f0b955cd-0a4a-47a6-98d6-f586f3dfae5d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import sysflightapimaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\flights:sys-flight-api-config-test" doc:id="411bffdf-2696-4e8f-b316-5525714496eb" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock getAllFlights" doc:id="6c4124bc-04b6-4c67-b979-3a59c938a837" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="32afa505-1efa-424d-9282-2939886eb4ea" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getflightssysflightapiconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="querryParamsVar" value="#[output application/java --- readUrl('classpath://getflightssysflightapiconfigtest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getflightssysflightapiconfigtest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="1d5b3d34-0f12-4157-b4d7-ce95b34525e8" >
				<munit:payload value="#[readUrl('classpath://getflightssysflightapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getflightssysflightapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getflightssysflightapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\flights:sys-flight-api-config" doc:id="93c74308-ed89-4f39-831d-59f2a3b33167" name="get:\flights:sys-flight-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6c250e46-d943-4b6c-a72e-b4ee46709d3a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getflightssysflightapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\flights\(airline):sys-flight-api-config-test" doc:id="36b1ad99-1c79-44fc-a6ab-a584791ba1b6" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock getFlightByName" doc:id="d6600e36-094c-4acb-b0bd-56951b02ad18" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="04d5ae29-3d07-4af5-9fbf-df9b455831f0" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getflightsairlinesysflightapiconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getflightsairlinesysflightapiconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getflightsairlinesysflightapiconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="c3e0cb37-25ac-4594-9786-43942b10562e" >
				<munit:payload value="#[readUrl('classpath://getflightsairlinesysflightapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getflightsairlinesysflightapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getflightsairlinesysflightapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\flights\(airline):sys-flight-api-config" doc:id="9bb422b5-748d-477a-9e29-289a40869d79" name="get:\flights\(airline):sys-flight-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f836f3f4-1947-4b1f-8dfa-49b0a23a7cb9" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getflightsairlinesysflightapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
